import logging
from aiogram import Bot, Dispatcher, executor, types, exceptions
from aiogram.dispatcher import Dispatcher, filters, FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from typing import Optional
from asyncio import sleep
import random
import os
import sys

try:
    if os.path.exists('token'):
        bot = Bot(token=open('token', 'r').read(), parse_mode="HTML")
        dp = Dispatcher(bot)
    else:
        token = input('–¢–µ–ª–µ–≥—Ä–∞–º–º —Ç–æ–∫–µ–Ω>> ')
        open('token', 'w').write(str(token))
        bot = Bot(token=open('token', 'r').read(), parse_mode="HTML")
        dp = Dispatcher(bot)
except exceptions.ValidationError:
    os.remove('token')
    sys.exit('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.')
    input('')

logging.basicConfig(level=logging.INFO)

itogs = ['–£ –≤–∞—Å –≤—É–ª—å–≤–∏—Ç.', '–£ –≤–∞—Å –±–∞—Ä—Ç–æ–ª–∏–Ω–∏—Ç.', '–£ –≤–∞—Å –±–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –≤–∞–≥–∏–Ω–æ–∑.', '–£ –≤–∞—Å –Ω–µ—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –≤–∞–≥–∏–Ω–∏—Ç.', 
    '–£ –≤–∞—Å –Ω–µ—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–ª—å–ø–∏—Ç.', '–£ –≤–∞—Å –≤–∞–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–æ–∑.', '–£ –≤–∞—Å —Ç—Ä–∏—Ö–æ–º–æ–Ω–∞–¥–Ω—ã–π –≤–∞–≥–∏–Ω–∏—Ç.', '–£ –≤–∞—Å —ç–Ω–¥–æ—Ü–µ—Ä–≤–∏—Ü–∏—Ç.', '–£ –≤–∞—Å —ç–Ω–¥–æ–º–µ—Ç—Ä–∏—Ç.', '–£ –≤–∞—Å –∞–¥–Ω–µ–∫—Å–∏—Ç.',
    '–£ –≤–∞—Å –≤—É–ª—å–≤–∏—Ç, –±–∞—Ä—Ç–æ–ª–∏–Ω–∏—Ç, –±–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –≤–∞–≥–∏–Ω–æ–∑, –Ω–µ—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –≤–∞–≥–∏–Ω–∏—Ç –∏ –∫–æ–ª—å–ø–∏—Ç, –≤–∞–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–æ–∑, —Ç—Ä–∏—Ö–æ–º–æ–Ω–∞–¥–Ω—ã–π –≤–∞–≥–∏–Ω–∏—Ç, —ç–Ω–¥–æ—Ü–µ—Ä–≤–∏—Ü–∏—Ç, —ç–Ω–¥–æ–º–µ—Ç—Ä–∏—Ç, –∞–¥–Ω–µ–∫—Å–∏—Ç.']

comments = ["–í –æ–±—â–µ–º –≤–∞–º –ø–∏–∑–¥–∞.", "–ó–∞—Ç–æ –≤—ã —Å–µ–∫—Å–∏.", "–ß–ª–µ–Ω –ø—Ä–∏–∫–æ–ª—å–Ω—ã–π –∫—Å—Ç–∞.", "–Ø –≤–∏–¥–µ–ª —ç—Ç–æ –≤ –¶–µ–Ω—Ç—Ä–µ –ü–∞—Ä–∏–∂–∞.", "–ú–Ω–µ –∑–Ω–∞–∫–æ–º–æ —ç—Ç–æ –≤–ª–∞–≥–∞–ª–∏—â–µ...", "–£ –º–µ–Ω—è –ª—É—á—à–µ.",
    "–û–≥–æ –ø–∏–∑–¥–∞", "–õ–æ—Ö", "–õ–æ–ª"]

#--------------------------------–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞--------------------------------
start = InlineKeyboardMarkup().add(InlineKeyboardButton('üîé –ù–∞—á–∞—Ç—å –æ—Å–º–æ—Ç—Ä –≤–ª–∞–≥–∞–ª–∏—â–∞', callback_data='start_vlagalishe'))
restart = InlineKeyboardMarkup().add(InlineKeyboardButton('üîé –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Å–º–æ—Ç—Ä –≤–ª–∞–≥–∞–ª–∏—â–∞', callback_data='start_vlagalishe'))
#--------------------------------–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞--------------------------------

def get_rand_element(list_) -> str:
    return random.choice(list_)

async def wait():
    await sleep(random.randint(1, 5))

@dp.callback_query_handler(lambda c: c.data == 'start_vlagalishe')
async def wow(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    await bot.send_message(callback_query.from_user.id, "<b>–ù–∞—á–∏–Ω–∞–µ–º –æ—Å–º–æ—Ç—Ä –≤–ª–∞–≥–∞–ª–∏—â–∞...</b>")
    await wait()

    await bot.send_message(callback_query.from_user.id, "<b>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–∑–æ–≤–æ–≥–æ –¥–Ω–∞...</b>")
    await wait()
    
    await bot.send_message(callback_query.from_user.id, "<b>–ü—Ä–æ—â—É–ø—ã–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö –≤–µ—Å—Ç–∏–±—É–ª—è—Ä–Ω—ã—Ö –∂–µ–ª–µ–∑...</b>")
    await wait()

    await bot.send_message(callback_query.from_user.id, "<b>–ü—Ä–æ—â—É–ø—ã–≤–∞–Ω–∏–µ —É—Ä–µ—Ç—Ä—ã...</b>")
    await wait()
    await bot.send_message(callback_query.from_user.id, get_rand_element(['–ö–æ–≥–¥–∞ —Ü–µ–ª–∫—É –ø–æ—Ç–µ—Ä—è–ª –¥—Ä—É–≥?', '–£—Ö –ø–∏–∑–¥–∞...']))

    await bot.send_message(callback_query.from_user.id, "<b>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–ª–∞–≥–∞–ª–∏—â–∞...</b>")
    await wait()
    await bot.send_message(callback_query.from_user.id, get_rand_element(['üò≥', '–£—Ö –ø–∏–∑–¥–∞...', '*—Ö–æ—á—É –µ–±–∞—Ç—å—Å—è*']))

    await bot.send_message(callback_query.from_user.id, "<b>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–ª–∞–≥–∞–ª–∏—â–Ω–æ–π —á–∞—Å—Ç–∏ —à–µ–π–∫–∏ –º–∞—Ç–∫–∏...</b>")
    await wait()
    await bot.send_message(callback_query.from_user.id, get_rand_element(['–æ–π –±–ª—è—Ç—å —á—Ç–æ —ç—Ç–æ', '–ú–∞–º–∞ –≤—ã–ª–µ–∑–∞–π –±–ª—è']))

    await bot.send_message(callback_query.from_user.id, "<b>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–¥–∞—Ç–æ–∫ –º–∞—Ç–∫–∏...</b>")
    await wait()

    await bot.send_message(callback_query.from_user.id, "<b>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ–∫–æ–ª–æ–º–∞—Ç–æ—á–Ω–æ–π –∫–ª–µ—Ç—á–∞—Ç–∫–∏...</b>")
    await wait()

    await bot.send_message(callback_query.from_user.id, "<b>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –º–∞–ª–æ–º —Ç–∞–∑—É...</b>")
    await wait()
    await bot.send_message(callback_query.from_user.id, get_rand_element(['–°–º–µ—Ç–∞–Ω–∞']))

    await bot.send_message(callback_query.from_user.id, '<b>–ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏...</b>')
    await wait()

    await bot.send_message(callback_query.from_user.id, f'{str(get_rand_element(itogs))}\n\n{str(get_rand_element(comments))}')
    await bot.send_message(callback_query.from_user.id, f'<b>–° –≤–∞—Å {str(random.randint(1, 30))}—Ç. —Ä—É–±–ª–µ–π.</b>')
    await bot.send_message(callback_query.from_user.id, '<b>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ!</b>')
    

@dp.message_handler()
async def none(message: types.Message):
    if message.text == '/start':
        await message.reply(f'<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n\n<b>–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –≤–ª–∞–≥–∞–ª–∏—â–∞. by mamintank</b>', reply_markup=start)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)